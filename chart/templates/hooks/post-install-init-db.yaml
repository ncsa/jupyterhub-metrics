{{- if .Values.timescaledb.enabled }}
# Post-install hook: Initialize database after TimescaleDB is running
# This runs after the main deployment to set up the database schema
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "jupyterhub-metrics.fullname" . }}-init-db
  namespace: {{ include "jupyterhub-metrics.namespace" . }}
  labels:
    {{- include "jupyterhub-metrics.labels" . | nindent 4 }}
    app.kubernetes.io/component: database-init
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 600
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        {{- include "jupyterhub-metrics.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database-init
    spec:
      {{- with .Values.advanced.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.advanced.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.advanced.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "jupyterhub-metrics.serviceAccountName" . }}
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: Never
      initContainers:
        - name: wait-for-db
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
            runAsUser: 1001
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for TimescaleDB to be ready at {{ include "jupyterhub-metrics.timescaledb.host" . }}:{{ .Values.timescaledb.database.port }}"
              until psql -c 'SELECT 1' >/dev/null 2>&1; do
                echo "Database is unavailable - sleeping"
                sleep 2
              done
              sleep 10
              echo "Database is available"
          env:
            - name: PGHOST
              value: {{ include "jupyterhub-metrics.timescaledb.host" . }}
            - name: PGPORT
              value: {{ include "jupyterhub-metrics.timescaledb.port" . | quote }}
            - name: PGDATABASE
              value: {{ .Values.timescaledb.database.name | quote }}
            - name: PGUSER
              value: {{ .Values.timescaledb.database.user | quote }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "jupyterhub-metrics.timescaledb.passwordSecret" . }}
                  key: {{ include "jupyterhub-metrics.timescaledb.passwordKey" . }}
      containers:
        - name: init-db
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
            runAsUser: 70
          env:
            - name: PGHOST
              value: {{ include "jupyterhub-metrics.timescaledb.host" . }}
            - name: PGPORT
              value: {{ include "jupyterhub-metrics.timescaledb.port" . | quote }}
            - name: PGDATABASE
              value: {{ .Values.timescaledb.database.name | quote }}
            - name: PGUSER
              value: {{ .Values.timescaledb.database.user | quote }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "jupyterhub-metrics.timescaledb.passwordSecret" . }}
                  key: {{ include "jupyterhub-metrics.timescaledb.passwordKey" . }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting database initialization..."

              # Check if database exists and has tables
              RESULT=$(psql -tc "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "-1")

              if [ "$RESULT" -gt 0 ]; then
                echo "Database already initialized with $RESULT tables"
                exit 0
              fi
              if [ "$RESULT" -gt 0 ]; then
                echo "Database already initialized with $RESULT tables"
                exit 0
              fi
              if [ "$RESULT" -lt 0 ]; then
                echo "Error checking tables tables"
                echo "${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}"
                psql -tc "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';"
                exit 0
              fi

              echo "Initializing database schema..."
              psql < /init/init-db.sql

              echo "Database initialization completed successfully"
          volumeMounts:
            - name: init-db-script
              mountPath: /init
      volumes:
        - name: init-db-script
          configMap:
            name: {{ include "jupyterhub-metrics.fullname" . }}-init-db-hook
            defaultMode: 0755
{{- end }}

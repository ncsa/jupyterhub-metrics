name: Python Code Quality

on:
  push:
    branches:
      - main
    paths:
      - "**.py"
      - ".github/workflows/python-lint.yml"
  pull_request:
    paths:
      - "**.py"
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort mypy
          # Install project dependencies if they exist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install common dependencies used in the project
          pip install psycopg2-binary httpx

      - name: Find Python files
        id: find-python
        run: |
          # Find all .py files excluding venv and .git directories
          PYTHON_FILES=$(find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" | tr '\n' ' ')
          if [ -z "$PYTHON_FILES" ]; then
            echo "No Python files found, skipping linting"
            echo "has_python_files=false" >> $GITHUB_OUTPUT
          else
            echo "Found Python files: $PYTHON_FILES"
            echo "has_python_files=true" >> $GITHUB_OUTPUT
            echo "python_files=$PYTHON_FILES" >> $GITHUB_OUTPUT
          fi

      - name: Run Black (code formatter check)
        if: steps.find-python.outputs.has_python_files == 'true'
        run: |
          find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" -exec black --check --diff {} + || true

      - name: Run isort (import sorting check)
        if: steps.find-python.outputs.has_python_files == 'true'
        run: |
          find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" -exec isort --check-only --diff {} + || true

      - name: Run Flake8 (style guide enforcement)
        if: steps.find-python.outputs.has_python_files == 'true'
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" -print0 | xargs -0 flake8 --count --select=E9,F63,F7,F82 --show-source --statistics
          # Treat all other issues as warnings
          find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" -print0 | xargs -0 flake8 --count --max-complexity=15 --max-line-length=120 --statistics --exit-zero

      - name: Run Pylint (static analysis)
        if: steps.find-python.outputs.has_python_files == 'true'
        run: |
          find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" -print0 | xargs -0 pylint --exit-zero --max-line-length=120 --disable=C0114,C0115,C0116

      - name: Run mypy (type checking)
        if: steps.find-python.outputs.has_python_files == 'true'
        run: |
          find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" -print0 | xargs -0 mypy --ignore-missing-imports --no-strict-optional --exit-zero

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install bandit
        run: pip install bandit[toml]

      - name: Find Python files
        id: find-python-security
        run: |
          PYTHON_FILES=$(find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*" | tr '\n' ' ')
          if [ -z "$PYTHON_FILES" ]; then
            echo "No Python files found, skipping security scan"
            echo "has_python_files=false" >> $GITHUB_OUTPUT
          else
            echo "Found Python files for security scan"
            echo "has_python_files=true" >> $GITHUB_OUTPUT
          fi

      - name: Run Bandit (security linter)
        if: steps.find-python-security.outputs.has_python_files == 'true'
        run: |
          # Find all Python files and scan them
          PYTHON_FILES=$(find . -type f -name "*.py" ! -path "*/venv/*" ! -path "*/.git/*")
          if [ -n "$PYTHON_FILES" ]; then
            echo "$PYTHON_FILES" | xargs bandit -ll -f json -o bandit-report.json || true
            echo "$PYTHON_FILES" | xargs bandit -ll || true
          fi

      - name: Upload Bandit results
        uses: actions/upload-artifact@v5
        if: always() && steps.find-python-security.outputs.has_python_files == 'true'
        with:
          name: bandit-security-report
          path: bandit-report.json
